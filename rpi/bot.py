import logging
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import os
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü—É—Ç—å –∫ CSV
CSV_PATH = "logs/sensor_log.csv"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
def generate_plots():
    df = pd.read_csv(CSV_PATH, parse_dates=["timestamp"])
    df.set_index("timestamp", inplace=True)

    metrics = {
        "temperature_C": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
        "humidity_air_%": "–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ (%)",
        "humidity_soil_adc": "–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã (ADC)"
    }

    # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫ —Å —Ç—Ä–µ–º—è –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    fig, axes = plt.subplots(3, 1, figsize=(12, 10))
    fig.suptitle('–î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤', fontsize=16)

    for i, (column, label) in enumerate(metrics.items()):
        axes[i].plot(df.index, df[column], linestyle='-', linewidth=2)
        axes[i].set_title(label)
        axes[i].set_ylabel(label)
        axes[i].grid(True, alpha=0.3)
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        axes[i].tick_params(axis='x', rotation=45)

    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
    buf.seek(0)
    plt.close()

    return buf

# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /stat
async def stat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        image = generate_plots()
        await update.message.reply_photo(photo=image)
        logging.info("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /stat: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    load_dotenv()
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    app.add_handler(CommandHandler("stat", stat_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    
    try:
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    import asyncio
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Jupyter –∏–ª–∏ Docker), –∏—Å–ø–æ–ª—å–∑—É–µ–º create_task
            loop.create_task(main())
        else:
            loop.run_until_complete(main())
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ event loop, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        asyncio.run(main())
