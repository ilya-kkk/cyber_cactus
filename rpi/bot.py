import logging
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü—É—Ç—å –∫ CSV
CSV_PATH = "logs/sensor_log.csv"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
def generate_plots():
    df = pd.read_csv(CSV_PATH, parse_dates=["timestamp"])
    df.set_index("timestamp", inplace=True)

    metrics = {
        "temperature_C": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
        "humidity_air_%": "–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ (%)",
        "humidity_soil_adc": "–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã (ADC)"
    }

    images = []

    for column, label in metrics.items():
        plt.figure(figsize=(10, 4))
        plt.plot(df.index, df[column], marker='o', linestyle='-')
        plt.title(label)
        plt.xlabel("–í—Ä–µ–º—è")
        plt.ylabel(label)
        plt.grid(True)

        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        images.append(buf)

        plt.close()

    return images

# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /stat
async def stat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        images = generate_plots()

        for img in images:
            await update.message.reply_photo(photo=img)

        logging.info("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /stat: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
      
    load_dotenv()
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    app.add_handler(CommandHandler("stat", stat_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
